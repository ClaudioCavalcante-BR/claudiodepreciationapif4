package br.edu.infnet.mono.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.core.userdetails.User;


@Configuration
@EnableWebSecurity
@EnableMethodSecurity(prePostEnabled = true)
public class SecurityConfig {
	
	@Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            // Autenticação básica + CSRF off (API stateless)
            .csrf(csrf -> csrf.disable())
            .authorizeHttpRequests(auth -> auth
                // H2 console (dev) liberado
                .requestMatchers("/h2-console/**").permitAll()

                // ====== CONTEXTO 1: ASSETS ======
                // leitura aberta a ADMIN e USER:
                .requestMatchers(HttpMethod.GET, "/api/assets/**").hasAnyRole("ADMIN", "USER")
                .requestMatchers(HttpMethod.GET, "/api/asset-categories/**").hasAnyRole("ADMIN", "USER")
                // escrita só ADMIN:
                .requestMatchers(HttpMethod.POST, "/api/assets/**", "/api/asset-categories/**").hasRole("ADMIN")
                .requestMatchers(HttpMethod.PUT, "/api/assets/**", "/api/asset-categories/**").hasRole("ADMIN")
                .requestMatchers(HttpMethod.DELETE, "/api/assets/**", "/api/asset-categories/**").hasRole("ADMIN")

                // ====== CONTEXTO 2: TRUCKS/FIPE ======
                // leitura (consultas FIPE) para ADMIN e USER:
                .requestMatchers(HttpMethod.GET, "/api/trucks/**", "/api/fipe/**").hasAnyRole("ADMIN", "USER")
                // se houver gravações relacionadas, restrinja a ADMIN:
                .requestMatchers(HttpMethod.POST, "/api/trucks/**").hasRole("ADMIN")
                .requestMatchers(HttpMethod.PUT, "/api/trucks/**").hasRole("ADMIN")
                .requestMatchers(HttpMethod.DELETE, "/api/trucks/**").hasRole("ADMIN")

                // Segurança por padrão: todo o resto autenticado
                .anyRequest().authenticated()
            )
            .httpBasic(withDefaults());

        // Necessário para o H2 console (frames)
        http.headers(headers -> headers.frameOptions(frame -> frame.disable()));

        return http.build();
    }

    @Bean
    public UserDetailsService userDetailsService() {
        UserDetails admin = User.withUsername("admin")
            .password(passwordEncoder().encode("adminPass"))
            .roles("ADMIN")
            .build();

        UserDetails user = User.withUsername("user")
            .password(passwordEncoder().encode("userPass"))
            .roles("USER")
            .build();

        return new InMemoryUserDetailsManager(admin, user);
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

}
